//******************************************************************************
// LICENSE DISCLAIMER:
// ===================

// Permission is granted to the public to copy and use this software
// without charge, provided that this Notice and any statement of
// authorship are reproduced on all copies.  Neither the Authors nor 
// Northern Michigan University makes any warranty, express or implied, 
// or assumes any liability or responsibility for the use of this software.
//
// PhysicsLists.cc
//
//******************************************************************************
//

#include "globals.hh"
#include "PhysicsList.hh"
#include "G4SystemOfUnits.hh"
#include "G4PhysicalConstants.hh"
#include "G4ParticleDefinition.hh"
#include "G4ParticleWithCuts.hh"
#include "G4ProcessManager.hh"
#include "G4ProcessVector.hh"
#include "G4ParticleTypes.hh"
#include "G4ParticleTable.hh"
#include "G4Material.hh"
#include "G4MaterialTable.hh"
#include "G4ios.hh"
#include <iomanip>

//----------------------------------------------------------------------------//
PhysicsList::PhysicsList():  G4VUserPhysicsList()
{
  defaultCutValue = 0.01*mm;
  SetVerboseLevel(1);
}

//----------------------------------------------------------------------------//
PhysicsList::~PhysicsList()
{
}

//----------------------------------------------------------------------------//
// Create all particles that can appear in this application.
//----------------------------------------------------------------------------//
void PhysicsList::ConstructParticle()
{
  // In this method, static member functions should be called
  // for all particles which you want to use.
  // This ensures that objects of these particle types will be
  // created in the program. 

  // Basic EM particles
  //
  G4Gamma::GammaDefinition();
  G4Electron::ElectronDefinition();
  G4Positron::PositronDefinition();
  G4Geantino::GeantinoDefinition();

}

//----------------------------------------------------------------------------//
// Create all particle transportation processes
//----------------------------------------------------------------------------//
void PhysicsList::ConstructProcess()
{
  AddTransportation();
  ConstructEM();
}


//----------------------------------------------------------------------------//
// Define electromagnetic transportation processes
//----------------------------------------------------------------------------//
// gamma (normal implementation)
#include "G4PhotoElectricEffect.hh"
#include "G4ComptonScattering.hh"  
//#include "G4PolarizedComptonScattering.hh"
#include "G4GammaConversion.hh" 
// gamma (low energy implementation)
//#include "G4LowEnergyPhotoElectric.hh"
//#include "G4LowEnergyRayleigh.hh" 
//#include "G4LowEnergyCompton.hh"  
//#include "G4LowEnergyPolarizedCompton.hh"
//#include "G4LowEnergyGammaConversion.hh" 
// gamma (G4LECS implementation)
#include "G4LECSRayleigh.hh"  
#include "G4LECSCompton.hh"  
// e-
//#include "G4MultipleScattering.hh"
#include "G4eMultipleScattering.hh"
//#include "G4LowEnergyIonisation.hh" 
//#include "G4LowEnergyBremsstrahlung.hh" 
// e+
#include "G4eIonisation.hh" 
#include "G4eBremsstrahlung.hh" 
#include "G4eplusAnnihilation.hh"
// Mu+/-
#include "G4MuMultipleScattering.hh"
#include "G4MuIonisation.hh"
#include "G4MuBremsstrahlung.hh"
#include "G4MuPairProduction.hh"
// p+
#include "G4hMultipleScattering.hh"
#include "G4hIonisation.hh"
//----------------------------------------------------------------------------//

// Insert the new include files for converting over to new e-/e+ lists

#include "G4PhysicsListHelper.hh"

// gamma
#include "G4PhotoElectricEffect.hh"
#include "G4LivermorePhotoElectricModel.hh"

#include "G4ComptonScattering.hh"
#include "G4LivermoreComptonModel.hh"

#include "G4GammaConversion.hh"
#include "G4LivermoreGammaConversionModel.hh"

#include "G4RayleighScattering.hh" 
#include "G4LivermoreRayleighModel.hh"

// e-
#include "G4eMultipleScattering.hh"
#include "G4UniversalFluctuation.hh"

#include "G4eIonisation.hh"
#include "G4LivermoreIonisationModel.hh"

#include "G4eBremsstrahlung.hh"
#include "G4LivermoreBremsstrahlungModel.hh"

//----------------------------------------------------------------------------//
// New void PhysicsList::ConstructEM(){}; method //

void PhysicsList::ConstructEM(){
  G4PhysicsListHelper* ph = G4PhysicsListHelper::GetPhysicsListHelper();
  theParticleIterator->reset();
  while( (*theParticleIterator)() ){
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4String particleName = particle->GetParticleName();
     
    if (particleName == "gamma") {

      G4PhotoElectricEffect* thePhotoElectricEffect = new G4PhotoElectricEffect();
      thePhotoElectricEffect->SetModel(new G4LivermorePhotoElectricModel());
      ph->RegisterProcess(thePhotoElectricEffect, particle);

      G4ComptonScattering* theComptonScattering = new G4ComptonScattering();
      theComptonScattering->SetModel(new G4LivermoreComptonModel());
      ph->RegisterProcess(theComptonScattering, particle);

      G4GammaConversion* theGammaConversion = new G4GammaConversion();
      theGammaConversion->SetModel(new G4LivermoreGammaConversionModel());
      ph->RegisterProcess(theGammaConversion, particle);

      G4RayleighScattering* theRayleigh = new G4RayleighScattering();
      theRayleigh->SetModel(new G4LivermoreRayleighModel());
      ph->RegisterProcess(theRayleigh, particle);
    
    } else if (particleName == "e-") {

      G4eMultipleScattering* msc = new G4eMultipleScattering();
      ph->RegisterProcess(msc, particle);
      
      // Ionisation
      G4eIonisation* eIoni = new G4eIonisation();
      eIoni->SetEmModel(new G4LivermoreIonisationModel());
      eIoni->SetFluctModel(new G4UniversalFluctuation() );
      ph->RegisterProcess(eIoni, particle);
      
      // Bremsstrahlung
      G4eBremsstrahlung* eBrem = new G4eBremsstrahlung();
      eBrem->SetEmModel(new G4LivermoreBremsstrahlungModel());
      ph->RegisterProcess(eBrem, particle);

    } else if (particleName == "e+") {
      // Low-energy classes (don't work, yet for positrons! as of 8/2003)
      //      ph->AddProcess(new G4MultipleScattering(),        -1, 1,1);
      //      ph->AddProcess(new G4LowEnergyIonisation(),       -1, 2,2);
      //      ph->AddProcess(new G4LowEnergyBremsstrahlung(),   -1,-1,3);      
      //      ph->AddProcess(new G4eplusAnnihilation(),          0,-1,4);      

      // Standard classes:  Old classes for standard classes 12/07/2011
      //ph->AddProcess(new G4eMultipleScattering(),-1, 1,1);
      //ph->AddProcess(new G4eIonisation(),       -1, 2,2);
      //ph->AddProcess(new G4eBremsstrahlung(),   -1,-1,3); 
      //ph->AddProcess(new G4eplusAnnihilation(),  0,-1,4);
      
      // Standard classes:
      //pmanager->AddProcess(new G4eMultipleScattering(),-1, 1,1);
      //pmanager->AddProcess(new G4eIonisation(),       -1, 2,2);
      //pmanager->AddProcess(new G4eBremsstrahlung(),   -1,-1,3); 
      //pmanager->AddProcess(new G4eplusAnnihilation(),  0,-1,4);
      
    } else if ((!particle->IsShortLived()) &&
	       (particle->GetPDGCharge() != 0.0) && 
	       (particle->GetParticleName() != "chargedgeantino")) {
      //all others charged particles except geantino
      //pmanager->AddProcess(new G4MuMultipleScattering(),-1,1,1);
      //pmanager->AddProcess(new G4hIonisation(),       -1,2,2); 

    }
  }
  }

//-------Old Method----------------------------------------------------------//
/*void PhysicsList::ConstructEM(){
  theParticleIterator->reset();
  while( (*theParticleIterator)() ){
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    G4String particleName = particle->GetParticleName();
     
    if (particleName == "gamma") {
      // Low-energy classes
      //pmanager->AddDiscreteProcess(new G4LowEnergyPhotoElectric());

      //pmanager->AddDiscreteProcess(new G4LECSRayleigh());
      //      pmanager->AddDiscreteProcess(new G4LowEnergyRayleigh());

      //pmanager->AddDiscreteProcess(new G4LECSCompton());
      //      pmanager->AddDiscreteProcess(new G4LowEnergyCompton());
      //      pmanager->AddDiscreteProcess(new G4LowEnergyPolarizedCompton());
      //pmanager->AddDiscreteProcess(new G4LowEnergyGammaConversion());

      // Standard classes
            pmanager->AddDiscreteProcess(new G4PhotoElectricEffect());
            pmanager->AddDiscreteProcess(new G4ComptonScattering());
            //pmanager->AddDiscreteProcess(new G4PolarizedComptonScattering());
            pmanager->AddDiscreteProcess(new G4GammaConversion());
      
    } else if (particleName == "e-") {
      // Low-energy classes
      pmanager->AddProcess(new G4eMultipleScattering(),        -1, 1,1);
      pmanager->AddProcess(new G4LowEnergyIonisation,         -1, 2,2);
      pmanager->AddProcess(new G4LowEnergyBremsstrahlung(),   -1,-1,3);      

      // Standard classes:
      //      pmanager->AddProcess(new G4MultipleScattering(),-1, 1,1);
      //      pmanager->AddProcess(new G4eIonisation(),       -1, 2,2);
      //      pmanager->AddProcess(new G4eBremsstrahlung(),   -1,-1,3); 
    
    } else if (particleName == "e+") {
      // Low-energy classes (don't work, yet for positrons! as of 8/2003)
      //      pmanager->AddProcess(new G4MultipleScattering(),        -1, 1,1);
      //      pmanager->AddProcess(new G4LowEnergyIonisation(),       -1, 2,2);
      //      pmanager->AddProcess(new G4LowEnergyBremsstrahlung(),   -1,-1,3);      
      //      pmanager->AddProcess(new G4eplusAnnihilation(),          0,-1,4);      

      // Standard classes:
      pmanager->AddProcess(new G4eMultipleScattering(),-1, 1,1);
      pmanager->AddProcess(new G4eIonisation(),       -1, 2,2);
      pmanager->AddProcess(new G4eBremsstrahlung(),   -1,-1,3); 
      pmanager->AddProcess(new G4eplusAnnihilation(),  0,-1,4);
      
    } else if ((!particle->IsShortLived()) &&
	       (particle->GetPDGCharge() != 0.0) && 
	       (particle->GetParticleName() != "chargedgeantino")) {
      //all others charged particles except geantino
      pmanager->AddProcess(new G4MuMultipleScattering(),-1,1,1);
      pmanager->AddProcess(new G4hIonisation(),       -1,2,2);      
    }
  }
  }*/


//----------------------------------------------------------------------------//
void PhysicsList::SetCuts()
{
  
  // set cut values for gamma at first and for e- second and next for e+,
  // because some processes for e+/e- need cut values for gamma 
  SetCutValue(defaultCutValue, "gamma");
  SetCutValue(defaultCutValue, "e-");
  SetCutValue(defaultCutValue, "e+");
 
  //  SetCutsWithDefault();   
  if (verboseLevel > 0) DumpCutValuesTable();  

}
